{
  "hash": "7b8e59ce8ae4176a7d82edf1b89332f6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '**Preprocessing**'\n---\n\n\n***\n## Notebook overview\n\nThis notebook alters the features to best capture the true nature of the data, based on the insights from the previous notebook. To do this, we define a class the encapsulates all of this logic, then wrap it in a reusable pipeline to ensure that there is no data leakage throughout the modeling process. \n\nTasks: \n\n- Apply custom feature engineering logic (`FeatureEngineer`) to extract meaningful patterns.\n- Encode categorical variables using one-hot encoding.\n- Scale numeric features to help stabilize logistic regression modeling.\n- Combine all preprocessing steps into a single `Pipeline` object.\n- Save the full pipeline with `joblib` so we can apply it consistently later.\n\n## Notebook outline: \n1. [Reload data](#1-reload-data)  \n2. [Validation](#2-validation)  \n3. [Feature engineering pipeline](#3-feature-engineering-pipeline)  \n4. [Preprocessing summary](#preprocessing-summary)\n\n\n::: {#30e44762 .cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nPreprocessing environment initialized.\n```\n:::\n:::\n\n\n# 1. Reload data\n***\n\nWe reload the cleaned dataset (data_01.csv) and validate that all expected columns are present — no extras, none missing.\n\n::: {#ed2015a1 .cell execution_count=2}\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn schema validation passed.\n```\n:::\n:::\n\n\n# 2. Validation\n***\n\nBefore preprocessing, we run validations to ensure:\n- No missing values or constant columns remain\n- Correct data types \n- Target (Attrition) is balanced\n\n::: {#279be89c .cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\nNo null values found.\n\nData types:\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nAge                          int64\nAttrition                   object\nBusinessTravel              object\nDailyRate                    int64\nDepartment                  object\nDistanceFromHome             int64\nEducation                    int64\nEducationField              object\nEnvironmentSatisfaction      int64\nGender                      object\nHourlyRate                   int64\nJobInvolvement               int64\nJobLevel                     int64\nJobRole                     object\nJobSatisfaction              int64\nMaritalStatus               object\nMonthlyIncome                int64\nMonthlyRate                  int64\nNumCompaniesWorked           int64\nOverTime                    object\nPercentSalaryHike            int64\nPerformanceRating            int64\nRelationshipSatisfaction     int64\nStockOptionLevel             int64\nTotalWorkingYears            int64\nTrainingTimesLastYear        int64\nWorkLifeBalance              int64\nYearsAtCompany               int64\nYearsInCurrentRole           int64\nYearsSinceLastPromotion      int64\nYearsWithCurrManager         int64\ndtype: object\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNo constant columns detected.\n\nClass balance in 'Attrition':\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nAttrition\nNo     0.839\nYes    0.161\nName: proportion, dtype: float64\n```\n:::\n:::\n\n\n# 3. Feature engineering pipeline\n***\n\n- This section creates custom features to capture patterns not directly visible in the raw data. We encapsulate this logic inside of a class, `FeatureEngineer()`, and then merge this into a Pipeline to prevent data leakage and ensure consistent preprocessing steps are applied. \n\n## `FeatureEngineer()` and `make_preprocessing_pipeline`\n\nTo capture interactions between features, and to make features suitable for modeling, all feature engineering logic is placed inside of class FeatureEngineer. This is helpful because it avoids having to repeat logic in subsequent notebooks. \n\nBelow is a breakdown of each added/modified feature:\n\n\n> ### Tenure and experience features\n\n**`TenureCategory`**  \nBuckets `YearsAtCompany` into tenure groups:  \n- `0–3 yrs`  \n- `4–6 yrs`  \n- `7–10 yrs`  \n- `10+ yrs`  \nThis captures key career stage segments, which may correspond to different attrition risks.\n\n**`TenureGap`**  \nCalculates: `YearsInCurrentRole` − `YearsAtCompany`  \nEmployees who may have changed roles internally versus those who stayed static, potentially indicating engagement or stagnation.\n\n**`TenureRatio`**  \nCalculates: `YearsInCurrentRole` / `YearsAtCompany`  \nIdentify fast or slow transitions. High ratios may indicate stagnation, while low ratios may indicate fast promotions or instability.\n\n**`ZeroCompanyTenureFlag`**  \nBinary flag indicating `YearsAtCompany` == 0  \nCaptures newly joined employees who may behave differently.\n\n**`NewJoinerFlag`**  \nFlags employees with:\n- `YearsAtCompany` < 2  \n- `TotalWorkingYears` > 3  \nThese are experienced employees that recently joined - a group that may behave differently due to habits or philosophies from previous jobs. \n\n\n> ### Role and work features\n\n**`Overtime_JobLevel`**  \nInteraction between `OverTime` and `JobLevel`  \nUseful for identifying levels of staff that are potentially overworked.\n\n**`Travel_Occupation`**  \nCombined effect of travel frequency and job role.  \nIdentify roles with high levels of travel which correlates with elevated attrition risk. \n\n\n> ### Satisfaction features\n\n**`SatisfactionMean`**  \nAverages the satisfaction scores:  \n- `EnvironmentSatisfaction`  \n- `JobSatisfaction`  \n- `RelationshipSatisfaction`  \nProvides a general overview of employee sentiment.\n\n**`SatisfactionRange`**  \nCalculates range of the 3 satisfaction scores  \nInconsistency in perceived satisfaction, potentially indicating internal conflict or instability.\n\n**`SatisfactionStability`**  \nBinary flag: 1 if all 3 satisfaction scores are equal  \nIdentifies employees with consistent satisfaction levels across all domains.\n\n\n> ### Financial features\n\n**`Log_MonthlyIncome`**  \nApplies log transform to `MonthlyIncome`  \nReduce skew and compress extreme values.\n\n**`Log_DistanceFromHome`**  \nApplies log transform to `DistanceFromHome`  \nReduce skew and compress extreme values.\n\n**`LowIncomeFlag`**  \nBinary flag for employees earning below the 25th percentile of income  \nCaptures possible financial dissatisfaction.\n\n\n> ### Burnout risk\n\n**`StressRisk`**  \nBinary flag for employees where:  \n- `OverTime` == Yes  \n- `JobSatisfaction` ≤ 2  \n- `SatisfactionMean` < 2.5  \nCombines workload and dissatisfaction into a high-risk signal for possible voluntary attrition.\n\n## Preprocessing pipeline definition\n\nWe finalize the preprocessing logic here by defining which columns to encode, scale, or pass through unchanged:\n\n- Categorical variables are one-hot encoded.\n- Continuous numeric features are standardized with `StandardScaler`.\n- Binary flags from feature engineering are passed through untouched.\n- All transformations are bundled into a `ColumnTransformer`, which is embedded in a reusable `Pipeline`.\n\nThis pipeline will be saved and applied during modeling (`03_modeling.ipynb`) to ensure consistent preprocessing and no data leakage.\n\n\n\n::: {#5a72273c .cell execution_count=5}\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Age', 'Attrition', 'BusinessTravel', 'DailyRate', 'Department',\n       'DistanceFromHome', 'Education', 'EducationField',\n       'EnvironmentSatisfaction', 'Gender', 'HourlyRate', 'JobInvolvement',\n       'JobLevel', 'JobRole', 'JobSatisfaction', 'MaritalStatus',\n       'MonthlyIncome', 'MonthlyRate', 'NumCompaniesWorked', 'OverTime',\n       'PercentSalaryHike', 'PerformanceRating', 'RelationshipSatisfaction',\n       'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear',\n       'WorkLifeBalance', 'YearsAtCompany', 'YearsInCurrentRole',\n       'YearsSinceLastPromotion', 'YearsWithCurrManager'],\n      dtype='object')\n```\n:::\n:::\n\n\n## Export pipeline\n\nWe export the preprocessing pipeline unfitted here, so that we can fit in the next notebook on only the training set. \n\n::: {#750f4f9e .cell execution_count=6}\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Age', 'BusinessTravel', 'DailyRate', 'Department', 'DistanceFromHome',\n       'Education', 'EducationField', 'EnvironmentSatisfaction', 'Gender',\n       'HourlyRate', 'JobInvolvement', 'JobLevel', 'JobRole',\n       'JobSatisfaction', 'MaritalStatus', 'MonthlyIncome', 'MonthlyRate',\n       'NumCompaniesWorked', 'OverTime', 'PercentSalaryHike',\n       'PerformanceRating', 'RelationshipSatisfaction', 'StockOptionLevel',\n       'TotalWorkingYears', 'TrainingTimesLastYear', 'WorkLifeBalance',\n       'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion',\n       'YearsWithCurrManager'],\n      dtype='object')\nPreprocessing pipeline saved.\n```\n:::\n:::\n\n\n# **Preprocessing summary**\n***\n\nThis notebook:\n\n- Applies feature logic with `FeatureEngineer`\n- Encodes categorical features using `OrdinalEncoder` and `OneHotEncoder`\n- Scales numerical features with `StandardScaler`\n- Wraps everything into a reusable `Pipeline`\n\nThis exported pipeline ensures consistent preprocessing across training and evaluation.\n\n",
    "supporting": [
      "02_preprocessing_files"
    ],
    "filters": [],
    "includes": {}
  }
}